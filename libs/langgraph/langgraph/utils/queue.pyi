import asyncio
import threading
from _typeshed import Incomplete

__all__ = ['AsyncQueue', 'SyncQueue']

class AsyncQueue(asyncio.Queue):
    async def wait(self) -> None: ...

class Semaphore(threading.Semaphore):
    def wait(self, blocking: bool = True, timeout: float | None = None): ...

class SyncQueue:
    def __init__(self) -> None: ...
    def put(self, item, block: bool = True, timeout: Incomplete | None = None) -> None: ...
    def get(self, block: bool = True, timeout: Incomplete | None = None): ...
    def wait(self, block: bool = True, timeout: Incomplete | None = None) -> None: ...
    def empty(self): ...
    def qsize(self): ...
    __class_getitem__: Incomplete
