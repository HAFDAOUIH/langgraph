from functools import cached_property as cached_property
from langchain_core.runnables import Runnable, RunnableConfig as RunnableConfig, RunnablePassthrough, RunnableSerializable as RunnableSerializable
from langchain_core.runnables.base import Input as Input, Other as Other
from langchain_core.runnables.utils import ConfigurableFieldSpec
from langgraph.pregel.protocol import PregelProtocol as PregelProtocol
from langgraph.pregel.retry import RetryPolicy as RetryPolicy
from langgraph.utils.runnable import RunnableCallable
from typing import Any, AsyncIterator, Callable, Iterator, Mapping, Sequence

READ_TYPE = Callable[[str | Sequence[str], bool], Any | dict[str, Any]]

class ChannelRead(RunnableCallable):
    channel: str | list[str]
    fresh: bool
    mapper: Callable[[Any], Any] | None
    @property
    def config_specs(self) -> list[ConfigurableFieldSpec]: ...
    def __init__(self, channel: str | list[str], *, fresh: bool = False, mapper: Callable[[Any], Any] | None = None, tags: list[str] | None = None) -> None: ...
    def get_name(self, suffix: str | None = None, *, name: str | None = None) -> str: ...
    @staticmethod
    def do_read(config: RunnableConfig, *, select: str | list[str], fresh: bool = False, mapper: Callable[[Any], Any] | None = None) -> Any: ...

DEFAULT_BOUND: RunnablePassthrough

class PregelNode(Runnable):
    channels: list[str] | Mapping[str, str]
    triggers: list[str]
    mapper: Callable[[Any], Any] | None
    writers: list[Runnable]
    bound: Runnable[Any, Any]
    retry_policy: RetryPolicy | None
    tags: Sequence[str] | None
    metadata: Mapping[str, Any] | None
    subgraphs: Sequence[PregelProtocol]
    def __init__(self, *, channels: list[str] | Mapping[str, str], triggers: Sequence[str], mapper: Callable[[Any], Any] | None = None, writers: list[Runnable] | None = None, tags: list[str] | None = None, metadata: Mapping[str, Any] | None = None, bound: Runnable[Any, Any] | None = None, retry_policy: RetryPolicy | None = None) -> None: ...
    def copy(self, update: dict[str, Any]) -> PregelNode: ...
    @cached_property
    def flat_writers(self) -> list[Runnable]: ...
    @cached_property
    def node(self) -> Runnable[Any, Any] | None: ...
    def join(self, channels: Sequence[str]) -> PregelNode: ...
    def __or__(self, other: Runnable[Any, Other] | Callable[[Any], Other] | Mapping[str, Runnable[Any, Other] | Callable[[Any], Other]]) -> PregelNode: ...
    def pipe(self, *others: Runnable[Any, Other] | Callable[[Any], Other], name: str | None = None) -> RunnableSerializable[Any, Other]: ...
    def __ror__(self, other: Runnable[Other, Any] | Callable[[Any], Other] | Mapping[str, Runnable[Other, Any] | Callable[[Other], Any]]) -> RunnableSerializable: ...
    def invoke(self, input: Input, config: RunnableConfig | None = None, **kwargs: Any | None) -> Any: ...
    async def ainvoke(self, input: Input, config: RunnableConfig | None = None, **kwargs: Any | None) -> Any: ...
    def stream(self, input: Input, config: RunnableConfig | None = None, **kwargs: Any | None) -> Iterator[Any]: ...
    async def astream(self, input: Input, config: RunnableConfig | None = None, **kwargs: Any | None) -> AsyncIterator[Any]: ...
