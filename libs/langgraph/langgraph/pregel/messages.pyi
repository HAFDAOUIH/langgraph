from _typeshed import Incomplete
from langchain_core.callbacks import BaseCallbackHandler
from langchain_core.messages import BaseMessage
from langchain_core.outputs import ChatGenerationChunk, LLMResult as LLMResult
from langchain_core.tracers._streaming import T as T, _StreamingCallbackHandler
from langgraph.types import StreamChunk as StreamChunk
from typing import Any, AsyncIterator, Callable, Iterator
from uuid import UUID

Meta = tuple[tuple[str, ...], dict[str, Any]]

class StreamMessagesHandler(BaseCallbackHandler, _StreamingCallbackHandler):
    run_inline: bool
    stream: Incomplete
    metadata: Incomplete
    seen: Incomplete
    def __init__(self, stream: Callable[[StreamChunk], None]) -> None: ...
    def tap_output_aiter(self, run_id: UUID, output: AsyncIterator[T]) -> AsyncIterator[T]: ...
    def tap_output_iter(self, run_id: UUID, output: Iterator[T]) -> Iterator[T]: ...
    def on_chat_model_start(self, serialized: dict[str, Any], messages: list[list[BaseMessage]], *, run_id: UUID, parent_run_id: UUID | None = None, tags: list[str] | None = None, metadata: dict[str, Any] | None = None, **kwargs: Any) -> Any: ...
    def on_llm_new_token(self, token: str, *, chunk: ChatGenerationChunk | None = None, run_id: UUID, parent_run_id: UUID | None = None, tags: list[str] | None = None, **kwargs: Any) -> Any: ...
    def on_llm_end(self, response: LLMResult, *, run_id: UUID, parent_run_id: UUID | None = None, **kwargs: Any) -> Any: ...
    def on_llm_error(self, error: BaseException, *, run_id: UUID, parent_run_id: UUID | None = None, **kwargs: Any) -> Any: ...
    def on_chain_start(self, serialized: dict[str, Any], inputs: dict[str, Any], *, run_id: UUID, parent_run_id: UUID | None = None, tags: list[str] | None = None, metadata: dict[str, Any] | None = None, **kwargs: Any) -> Any: ...
    def on_chain_end(self, response: Any, *, run_id: UUID, parent_run_id: UUID | None = None, **kwargs: Any) -> Any: ...
    def on_chain_error(self, error: BaseException, *, run_id: UUID, parent_run_id: UUID | None = None, **kwargs: Any) -> Any: ...
