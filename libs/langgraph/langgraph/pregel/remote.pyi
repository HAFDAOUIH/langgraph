from _typeshed import Incomplete
from langchain_core.runnables import RunnableConfig
from langchain_core.runnables.graph import Graph as DrawableGraph
from langgraph.pregel.protocol import PregelProtocol
from langgraph.pregel.types import All as All, StateSnapshot, StreamMode as StreamMode
from langgraph.types import StreamProtocol as StreamProtocol
from langgraph_sdk.client import LangGraphClient as LangGraphClient, SyncLangGraphClient as SyncLangGraphClient
from langgraph_sdk.schema import Checkpoint as Checkpoint, ThreadState as ThreadState
from typing import Any, AsyncIterator, Iterator, Literal, Sequence
from typing_extensions import Self

class RemoteException(Exception): ...

class RemoteGraph(PregelProtocol):
    name: str
    config: Incomplete
    client: Incomplete
    sync_client: Incomplete
    def __init__(self, name: str, /, *, url: str | None = None, api_key: str | None = None, headers: dict[str, str] | None = None, client: LangGraphClient | None = None, sync_client: SyncLangGraphClient | None = None, config: RunnableConfig | None = None) -> None: ...
    def copy(self, update: dict[str, Any]) -> Self: ...
    def with_config(self, config: RunnableConfig | None = None, **kwargs: Any) -> Self: ...
    def get_graph(self, config: RunnableConfig | None = None, *, xray: int | bool = False) -> DrawableGraph: ...
    async def aget_graph(self, config: RunnableConfig | None = None, *, xray: int | bool = False) -> DrawableGraph: ...
    def get_state(self, config: RunnableConfig, *, subgraphs: bool = False) -> StateSnapshot: ...
    async def aget_state(self, config: RunnableConfig, *, subgraphs: bool = False) -> StateSnapshot: ...
    def get_state_history(self, config: RunnableConfig, *, filter: dict[str, Any] | None = None, before: RunnableConfig | None = None, limit: int | None = None) -> Iterator[StateSnapshot]: ...
    async def aget_state_history(self, config: RunnableConfig, *, filter: dict[str, Any] | None = None, before: RunnableConfig | None = None, limit: int | None = None) -> AsyncIterator[StateSnapshot]: ...
    def update_state(self, config: RunnableConfig, values: dict[str, Any] | Any | None, as_node: str | None = None) -> RunnableConfig: ...
    async def aupdate_state(self, config: RunnableConfig, values: dict[str, Any] | Any | None, as_node: str | None = None) -> RunnableConfig: ...
    def stream(self, input: dict[str, Any] | Any, config: RunnableConfig | None = None, *, stream_mode: StreamMode | list[StreamMode] | None = None, interrupt_before: All | Sequence[str] | None = None, interrupt_after: All | Sequence[str] | None = None, subgraphs: bool = False, **kwargs: Any) -> Iterator[dict[str, Any] | Any]: ...
    async def astream(self, input: dict[str, Any] | Any, config: RunnableConfig | None = None, *, stream_mode: StreamMode | list[StreamMode] | None = None, interrupt_before: All | Sequence[str] | None = None, interrupt_after: All | Sequence[str] | None = None, subgraphs: bool = False, **kwargs: Any) -> AsyncIterator[dict[str, Any] | Any]: ...
    async def astream_events(self, input: Any, config: RunnableConfig | None = None, *, version: Literal['v1', 'v2'], include_names: Sequence[All] | None = None, include_types: Sequence[All] | None = None, include_tags: Sequence[All] | None = None, exclude_names: Sequence[All] | None = None, exclude_types: Sequence[All] | None = None, exclude_tags: Sequence[All] | None = None, **kwargs: Any) -> AsyncIterator[dict[str, Any]]: ...
    def invoke(self, input: dict[str, Any] | Any, config: RunnableConfig | None = None, *, interrupt_before: All | Sequence[str] | None = None, interrupt_after: All | Sequence[str] | None = None, **kwargs: Any) -> dict[str, Any] | Any: ...
    async def ainvoke(self, input: dict[str, Any] | Any, config: RunnableConfig | None = None, *, interrupt_before: All | Sequence[str] | None = None, interrupt_after: All | Sequence[str] | None = None, **kwargs: Any) -> dict[str, Any] | Any: ...
