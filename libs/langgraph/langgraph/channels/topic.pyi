from _typeshed import Incomplete
from langgraph.channels.base import BaseChannel, Value
from typing import Any, Generic, Iterator, Sequence
from typing_extensions import Self

def flatten(values: Sequence[Value | list[Value]]) -> Iterator[Value]: ...

class Topic(BaseChannel[Sequence[Value], Value | list[Value], tuple[set[Value], list[Value]]], Generic[Value]):
    accumulate: Incomplete
    values: Incomplete
    def __init__(self, typ: type[Value], accumulate: bool = False) -> None: ...
    def __eq__(self, value: object) -> bool: ...
    @property
    def ValueType(self) -> Any: ...
    @property
    def UpdateType(self) -> Any: ...
    def checkpoint(self) -> tuple[set[Value], list[Value]]: ...
    def from_checkpoint(self, checkpoint: list[Value] | None) -> Self: ...
    def update(self, values: Sequence[Value | list[Value]]) -> None: ...
    def get(self) -> Sequence[Value]: ...
