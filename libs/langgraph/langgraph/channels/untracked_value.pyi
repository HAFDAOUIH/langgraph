from _typeshed import Incomplete
from langgraph.channels.base import BaseChannel, Value
from typing import Generic, Sequence
from typing_extensions import Self

class UntrackedValue(BaseChannel[Value, Value, Value], Generic[Value]):
    guard: Incomplete
    def __init__(self, typ: type[Value], guard: bool = True) -> None: ...
    def __eq__(self, value: object) -> bool: ...
    @property
    def ValueType(self) -> type[Value]: ...
    @property
    def UpdateType(self) -> type[Value]: ...
    def checkpoint(self) -> Value: ...
    def from_checkpoint(self, checkpoint: Value | None) -> Self: ...
    value: Incomplete
    def update(self, values: Sequence[Value]) -> bool: ...
    def get(self) -> Value: ...
