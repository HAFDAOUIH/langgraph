from langgraph.channels.base import BaseChannel, Value
from typing import Generic, Sequence
from typing_extensions import Self

class NamedBarrierValue(BaseChannel[Value, Value, set[Value]], Generic[Value]):
    names: set[Value]
    seen: set[Value]
    def __init__(self, typ: type[Value], names: set[Value]) -> None: ...
    def __eq__(self, value: object) -> bool: ...
    @property
    def ValueType(self) -> type[Value]: ...
    @property
    def UpdateType(self) -> type[Value]: ...
    def checkpoint(self) -> set[Value]: ...
    def from_checkpoint(self, checkpoint: set[Value] | None) -> Self: ...
    def update(self, values: Sequence[Value]) -> bool: ...
    def get(self) -> Value: ...
    def consume(self) -> bool: ...
