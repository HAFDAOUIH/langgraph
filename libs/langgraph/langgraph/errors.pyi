from enum import Enum
from langgraph.checkpoint.base import EmptyChannelError as EmptyChannelError
from langgraph.types import Command as Command, Interrupt
from typing import Any, Sequence

class ErrorCode(Enum):
    GRAPH_RECURSION_LIMIT = 'GRAPH_RECURSION_LIMIT'
    INVALID_CONCURRENT_GRAPH_UPDATE = 'INVALID_CONCURRENT_GRAPH_UPDATE'
    INVALID_GRAPH_NODE_RETURN_VALUE = 'INVALID_GRAPH_NODE_RETURN_VALUE'
    MULTIPLE_SUBGRAPHS = 'MULTIPLE_SUBGRAPHS'
    INVALID_CHAT_HISTORY = 'INVALID_CHAT_HISTORY'

def create_error_message(*, message: str, error_code: ErrorCode) -> str: ...

class GraphRecursionError(RecursionError): ...
class InvalidUpdateError(Exception): ...
class GraphBubbleUp(Exception): ...

class GraphInterrupt(GraphBubbleUp):
    def __init__(self, interrupts: Sequence[Interrupt] = ()) -> None: ...

class NodeInterrupt(GraphInterrupt):
    def __init__(self, value: Any) -> None: ...

class GraphDelegate(GraphBubbleUp):
    def __init__(self, *args: dict[str, Any]) -> None: ...

class ParentCommand(GraphBubbleUp):
    args: tuple[Command]
    def __init__(self, command: Command) -> None: ...

class EmptyInputError(Exception): ...
class TaskNotFound(Exception): ...
class CheckpointNotLatest(Exception): ...
